from collections import deque
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
def is_goal(state):
    return state == goal_state
def get_successors(state):
    successors = []
    empty_row, empty_col = find_empty(state)

    for move in moves:
        new_row, new_col = empty_row + move[0], empty_col + move[1]
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_state = [row[:] for row in state]
            new_state[empty_row][empty_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[empty_row][empty_col]
            successors.append(new_state)
    
    return successors
def find_empty(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def bfs(initial_state):
    queue = deque([initial_state])
    visited = set()
    visited.add(tuple(tuple(row) for row in initial_state))
    parent = {tuple(tuple(row) for row in initial_state): None}
    
    while queue:
        current_state = queue.popleft()
        if is_goal(current_state):
            path = []
            while current_state is not None:
                path.append(current_state)
                current_state = parent[tuple(tuple(row) for row in current_state)]
            return path[::-1]
        
        for successor in get_successors(current_state):
            state_tuple = tuple(tuple(row) for row in successor)
            if state_tuple not in visited:
                visited.add(state_tuple)
                parent[state_tuple] = current_state
                queue.append(successor)
    
    return None
initial_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]
solution = bfs(initial_state)
if solution:
    print("Solution found:")
    for step in solution:
        for row in step:
            print(row)
        print()
else:
    print("No solution found.")
